import org.junit.Before;
import org.junit.Test;

import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class TestRouter {
    private static final String PARAMS_FILE = "path_params.txt";
    private static final String RESULTS_FILE = "path_results.txt";
    private static final int NUM_TESTS = 8;
    private static final String OSM_DB_PATH = "../library-sp18/data/berkeley-2018.osm.xml";
    private static GraphDB graph;
    private static boolean initialized = false;

    @Before
    public void setUp() throws Exception {
        if (initialized) {
            return;
        }
        graph = new GraphDB(OSM_DB_PATH);
        initialized = true;
    }

    @Test
    public void testShortestPath() throws Exception {
        List<Map<String, Double>> testParams = paramsFromFile();
        List<List<Long>> expectedResults = resultsFromFile();

        for (int i = 0; i < NUM_TESTS; i++) {
            System.out.println(String.format("Running test: %d", i));
            Map<String, Double> params = testParams.get(i);
            List<Long> actual = Router.shortestPath(graph,
                    params.get("start_lon"), params.get("start_lat"),
                    params.get("end_lon"), params.get("end_lat"));
            List<Long> expected = expectedResults.get(i);
            assertEquals("Your results did not match the expected results", expected, actual);
        }
    }

    @Test
    public void mytest() {
        double end_lat = 37.85137061549234, start_lon = -122.22920785028629, start_lat = 37.840234746075204, end_lon = -122.27953000506064;
        List<Long> mylist = Router.shortestPath(graph, start_lon, start_lat, end_lon, end_lat);
        //{end_lat=37.88603237461623, start_lon=-122.27900991059349, start_lat=37.839710229724666, end_lon=-122.27818337637576}
        // expected:<[1237053688, 1237053674, 1237053603, 53047027, 53048134, 53096366, 53086213, 53096363, 2240045669, 92951470, 4169547878, 92951651, 53107920, 4419821452, 283296745, 53107921, 53096359, 53096356, 2356904754, 53085979, 2356904753, 53088321, 2184578208, 283296744, 1994957640, 1994957646, 53085427, 1994957632, 302803293, 53050644, 4235206796, 53050642, 4235206801, 4168260358, 4235206809, 53024607, 4235206815, 4235206841, 53050641, 4235206846, 4168260362, 53050639, 4235206858, 53050637, 3679166588, 4168260365, 53050635, 4235206872, 53050634, 4235206876, 2638736382, 4168260369, 2503300793, 53039453, 1994957639, 4233488262, 53050633, 4233488270, 4168260377, 2422457036, 4927335867, 4927335866, 4233488285, 53050629, 4233489789, 1374984805, 4168260382, 4233489798, 53050628, 4233489803, 4233489806, 53037895, 4233489809, 4363724433, 4363724441, 4233489828, 53050627, 4233489832, 4233489835, 53050625, 4233489840, 4168148259, 4233489847, 53050623, 4233489852, 4233489858, 53050621, 4233489862, 240458769, 240458938, 4233489868, 4233489869, 53050619, 4233489873, 240458771, 240459290, 4227851392, 53020955, 4227851396, 4168148266, 240458779, 240459292, 4227851421, 53050617, 4227851426, 4227851428, 53050615, 4227851432, 3701919254, 4227851450, 53050613, 4227851457, 417274714, 240458782, 4227851469, 53050612, 4227851473, 4227851475, 4225376402, 240448890, 53050611, 4225376410, 4678949739, 4168148401, 4225376418, 53042650, 4225376424, 53050608, 1994957644, 53050607, 4168148405, 4225376445, 53050606, 4225376453, 5308494336, 4168148408, 2405711053, 1730966022, 4225206847, 53050603, 4225206852, 53050601, 4225206884, 53050599, 4225206888, 4167607793, 53050597, 240404722, 240404719, 240404710, 53050596, 4225207009, 314077720, 3796363283, 3796363279, 53050595, 4167607799, 261735848, 4221298009, 53019155, 4221298015, 2057303565, 53019157, 1762728688, 4226533405, 53019159, 4226533406, 1778566054, 4226533407, 53019160, 58443246, 4226533409, 53019161, 53019162, 261735962, 317110874, 317110873, 53058802, 53058801, 261735963, 317110641, 53058820, 53058819, 53058818, 261735965, 317110511, 261735968]> but was:<[1237053688, 1237053674, 1237053603, 53047027, 53048134, 53096366, 53086213, 53096363, 2240045669, 92951470, 4169547878, 92951651, 53107920, 4419821452, 283296745, 53107921, 53096359, 53096356, 2356904754, 53085979, 2356904753, 53088321, 2184578208, 283296744, 1994957633, 53085428, 240469483, 240469783, 240469487, 4235206797, 240469532, 4235206802, 4235206810, 240469707, 4235206816, 4168260360, 4235206842, 240469705, 4235206848, 4168260363, 283296748, 4235206859, 240469703, 4235206873, 240469701, 4235206879, 53039454, 1994957627, 4168260374, 4233488264, 240469700, 4233488271, 2422457034, 240469629, 4168260380, 4233488286, 240469627, 4233489790, 4168260383, 4233489799, 240469698, 4233489804, 4233489807, 240469624, 4233489810, 4233489829, 240469515, 4233489833, 4168148256, 4233489836, 240469696, 4233489841, 4233489848, 240469512, 4233489853, 4233489859, 240469619, 4233489863, 240469694, 240469693, 4233489870, 240469785, 4233489874, 240469763, 240469686, 4168148265, 240469684, 4227851393, 240469682, 4227851397, 4227851423, 240469773, 4227851427, 4227851429, 240469495, 4227851433, 4227851451, 240469679, 4227851458, 258761346, 258761348, 4227851470, 240469490, 4227851474, 4168148391, 4225376403, 240469798, 240404682, 4225376411, 2229285696, 4225376419, 240404686, 4225376425, 240404677, 1994957643, 240404660, 4168148407, 4225376446, 240404674, 4225376454, 4005064968, 240404690, 1730966024, 4168148411, 4225206848, 240404695, 4225206853, 240404700, 4167607791, 4225206885, 240404664, 4225206989, 750031554, 750031555, 240404715, 240404717, 53050596, 4225207009, 314077720, 3796363283, 3796363279, 53050595, 4167607799, 261735848, 4221298009, 53019155, 4221298015, 2057303565, 53019157, 1762728688, 4226533405, 53019159, 4226533406, 1778566054, 4226533407, 53019160, 58443246, 4226533409, 53019161, 53019162, 261735962, 317110874, 317110873, 53058802, 53058801, 261735963, 317110641, 53058820, 53058819, 53058818, 261735965, 317110511, 261735968]>
        String[] ex = "266580844, 266580843, 266580842, 266580841, 206170497, 266580840, 53042266, 53057752, 266417451, 266417450, 53086032, 265520330, 53044497, 53042912, 256544313, 256544312, 256544311, 256544310, 53086029, 956504928, 956504927, 53043659, 956504828, 206172768, 1212905261, 1212905280, 1212905365, 1212905316, 53024909, 244499344, 201618993, 4598334234, 1212905318, 553970499, 244499345, 53024871, 1212905383, 53018859, 1212905320, 553970965, 53024868, 1212905283, 1212905374, 1212905287, 1212905333, 1212905372, 201604652, 310941666, 201540494, 1212905264, 53024867, 1212905317, 53023283, 2391023541, 206093380, 1212905301, 310941757, 53023281, 310941754, 206093379, 53023279, 53023277, 53023275, 663304140, 53023273, 53111749, 2430670102, 542970828, 53090709, 542971100, 53047615, 53080700, 53020795, 53131689, 53153110, 2817627483, 53091486, 688195477, 53085776, 688195480, 688195487, 4744448230, 52997894, 4744448231, 2853241698, 4744448233, 53043600, 53043602, 53043597, 53040552, 53112629, 53112630, 1237053684, 53099302, 4744448238, 1237053671, 53099304, 53112632, 957658297, 957660711, 247367019, 1237053564, 53096039, 1237053757, 1237053743, 53065529, 1237053731, 53112636, 1237031707, 53112620, 1237031711, 5061052907, 1237053749, 53112621, 95323761, 1237053736, 1237053724, 2240045668, 53112624, 2240045667, 430992572, 53090197, 430992573, 240469672, 240469473, 1994957647, 1237053718, 240469592, 240469594, 1237053660, 4559569767, 240469840, 240469597, 4559569772, 240469482, 1994957631, 240469483, 240469783, 240469487, 4235206797, 240469532, 4235206802, 4235206810, 240469707, 53024607, 4235206811, 53024605, 687179342, 394196539, 53100729, 394196538, 4235206851, 53138574, 53047313, 4235206852, 53047311, 2421788558, 53047309, 4235206863, 53070074, 53048450, 4235206871".split(", ");

        System.out.println( ex.length + " " + mylist.size());
        for (int i = 0; i < ex.length; i++) {
            System.out.println(ex[i] + " " + mylist.get(i));
            assertTrue(ex[i].equals(String.valueOf(mylist.get(i))));
        }
    }

    private List<Map<String, Double>> paramsFromFile() throws Exception {
        List<String> lines = Files.readAllLines(Paths.get(PARAMS_FILE), Charset.defaultCharset());
        List<Map<String, Double>> testParams = new ArrayList<>();
        int lineIdx = 2; // ignore comment lines
        for (int i = 0; i < NUM_TESTS; i++) {
            Map<String, Double> params = new HashMap<>();
            params.put("start_lon", Double.parseDouble(lines.get(lineIdx)));
            params.put("start_lat", Double.parseDouble(lines.get(lineIdx + 1)));
            params.put("end_lon", Double.parseDouble(lines.get(lineIdx + 2)));
            params.put("end_lat", Double.parseDouble(lines.get(lineIdx + 3)));
            testParams.add(params);
            lineIdx += 4;
        }
        return testParams;
    }

    private List<List<Long>> resultsFromFile() throws Exception {
        List<String> lines = Files.readAllLines(Paths.get(RESULTS_FILE), Charset.defaultCharset());
        List<List<Long>> expected = new ArrayList<>();
        int lineIdx = 2; // ignore comment lines
        for (int i = 0; i < NUM_TESTS; i++) {
            int numVertices = Integer.parseInt(lines.get(lineIdx));
            lineIdx++;
            List<Long> path = new ArrayList<>();
            for (int j = 0; j < numVertices; j++) {
                path.add(Long.parseLong(lines.get(lineIdx)));
                lineIdx++;
            }
            expected.add(path);
        }
        return expected;
    }
}
